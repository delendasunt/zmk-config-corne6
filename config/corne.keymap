/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "tap-unless-interrupted"; };

/ {
    behaviors {
        cwt: Caps_Word_Tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_TAP";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC              &kp Q           &kp W           &kp F               &kp P             &kp B          &kp J    &kp L              &kp U               &kp Y           &kp DEL         &kp BSPC
&kp TAB              &mt LEFT_GUI A  &mt LEFT_ALT R  &mt LEFT_CONTROL S  &mt LEFT_SHIFT T  &kp G          &kp M    &mt RIGHT_SHIFT N  &mt LEFT_CONTROL E  &mt LEFT_ALT I  &mt LEFT_GUI O  &kp SQT
&cwt LEFT_CONTROL 0  &kp Z           &kp X           &kp C               &kp D             &kp V          &kp K    &kp H              &kp COMMA           &kp DOT         &kp FSLH        &kp SEMICOLON
                                                     &kp LGUI            &mo 1             &lt 3 SPACE    &kp RET  &mo 2              &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans                  &trans                   &trans                         &trans                           &trans          &trans    &kp LS(EXCL)                      &kp EQUAL                       &kp BSLH                  &kp LS(AMPS)               &trans
&trans  &mt LEFT_GUI LESS_THAN  &mt LEFT_ALT LEFT_BRACE  &mt LEFT_CONTROL LEFT_BRACKET  &mt LEFT_SHIFT LEFT_PARENTHESIS  &kp LS(PIPE)    &kp BSLH  &mt LEFT_SHIFT RIGHT_PARENTHESIS  &mt LEFT_CONTROL RIGHT_BRACKET  &mt LEFT_ALT RIGHT_BRACE  &mt LEFT_GUI GREATER_THAN  &trans
&trans  &trans                  &trans                   &trans                         &trans                           &trans          &trans    &kp ESC                           &kp U                           &kp LS(UNDER)             &trans                     &trans
                                                         &trans                         &trans                           &trans          &trans    &trans                            &trans
            >;
        };
    };
};
